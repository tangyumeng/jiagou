//
//  HomeViewController.swift
//  jiagou
//
//  ‰∏ªÈ°µ - Â±ïÁ§∫ÊâÄÊúâÊû∂ÊûÑÁü•ËØÜÁÇπÂÖ•Âè£
//

import UIKit

// MARK: - Êû∂ÊûÑÁü•ËØÜÁÇπÊ®°Âûã
struct ArchitectureItem {
    let title: String           // Ê†áÈ¢ò
    let subtitle: String        // ÂâØÊ†áÈ¢ò
    let icon: String           // SF Symbol ÂõæÊ†áÂêç
    let color: UIColor         // ‰∏ªÈ¢òËâ≤
    let viewController: () -> UIViewController  // ÂàõÂª∫ ViewController ÁöÑÈó≠ÂåÖ
}

// MARK: - ‰∏ªÈ°µ ViewController
class HomeViewController: UIViewController {
    
    // MARK: - UI ÁªÑ‰ª∂
    private lazy var tableView: UITableView = {
        let table = UITableView(frame: .zero, style: .insetGrouped)
        table.delegate = self
        table.dataSource = self
        table.register(ArchitectureItemCell.self, forCellReuseIdentifier: "ArchitectureItemCell")
        table.rowHeight = 80
        table.translatesAutoresizingMaskIntoConstraints = false
        return table
    }()
    
    private let headerView = HomeHeaderView()
    
    // MARK: - Êï∞ÊçÆÊ∫ê
    private let architectureItems: [ArchitectureItem] = [
        ArchitectureItem(
            title: "‰∏ãËΩΩÁÆ°ÁêÜÂô®",
            subtitle: "Âπ∂ÂèëÊéßÂà∂ ¬∑ Êñ≠ÁÇπÁª≠‰º† ¬∑ ÂêéÂè∞‰∏ãËΩΩ ¬∑ ÊåÅ‰πÖÂåñ",
            icon: "arrow.down.circle.fill",
            color: .systemBlue,
            viewController: { DownloadManagerDemoViewController() }
        ),
        ArchitectureItem(
            title: "ÂõæÁâáÂä†ËΩΩÊ°ÜÊû∂",
            subtitle: "‰∏âÁ∫ßÁºìÂ≠ò ¬∑ NSCache ¬∑ Èò≤ÈáçÂ§ç‰∏ãËΩΩ ¬∑ LRUÁ≠ñÁï•",
            icon: "photo.fill",
            color: .systemPurple,
            viewController: { ImageLoaderDemoViewController() }
        ),
        ArchitectureItem(
            title: "Ë∑ØÁî±Ê°ÜÊû∂",
            subtitle: "URLÂåπÈÖç ¬∑ ÂèÇÊï∞‰º†ÈÄí ¬∑ Êã¶Êà™Âô® ¬∑ ÁªÑ‰ª∂Âåñ",
            icon: "map.fill",
            color: .systemOrange,
            viewController: { RouterDemoViewController() }
        ),
        ArchitectureItem(
            title: "Êó•ÂøóÊ°ÜÊû∂",
            subtitle: "Â§öÁ∫ßÂà´ ¬∑ Â§öËæìÂá∫ ¬∑ Êñá‰ª∂ËΩÆËΩ¨ ¬∑ ËøúÁ®ã‰∏äÊä•",
            icon: "doc.text.fill",
            color: .systemGreen,
            viewController: { LoggerDemoViewController() }
        ),
        ArchitectureItem(
            title: "EventBus Ê∂àÊÅØÈÄö‰ø°",
            subtitle: "ÂèëÂ∏ÉËÆ¢ÈòÖ ¬∑ Á±ªÂûãÂÆâÂÖ® ¬∑ Ëß£ËÄ¶ÈÄö‰ø° ¬∑ Á∫øÁ®ãÂÆâÂÖ®",
            icon: "bubble.left.and.bubble.right.fill",
            color: .systemPink,
            viewController: { EventBusExampleViewController() }
        ),
        ArchitectureItem(
            title: "MVVM Êû∂ÊûÑ",
            subtitle: "Êï∞ÊçÆÁªëÂÆö ¬∑ ËÅåË¥£ÂàÜÁ¶ª ¬∑ Êòì‰∫éÊµãËØï",
            icon: "square.stack.3d.up.fill",
            color: .systemTeal,
            viewController: { MVVMDemoViewController() }
        ),
        ArchitectureItem(
            title: "MVP Êû∂ÊûÑ",
            subtitle: "ËÅåË¥£ÂàÜÁ¶ª ¬∑ Êòì‰∫éÊµãËØï ¬∑ ÊâãÂä®ÁªëÂÆö",
            icon: "rectangle.stack.fill",
            color: .systemCyan,
            viewController: { MVPDemoViewController() }
        ),
        ArchitectureItem(
            title: "ÂçèËÆÆË∑ØÁî±ÔºàÊ®°ÂùóÂåñÔºâ",
            subtitle: "Á±ªÂûãÂÆâÂÖ® ¬∑ Ê®°ÂùóÈÄö‰ø° ¬∑ ÊúçÂä°Ë∞ÉÁî® ¬∑ Â§ßÂûãÈ°πÁõÆ",
            icon: "link.circle.fill",
            color: .systemIndigo,
            viewController: { ModuleDemoViewController() }
        )
    ]
    
    // MARK: - ÁîüÂëΩÂë®Êúü
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        
        // ÊâßË°åÂæÖÂ§ÑÁêÜÁöÑË∑ØÁî±ÔºàÂ¶ÇÊûúÊúâÔºâ
        // ‰ΩøÁî®Âú∫ÊôØÔºöApp ‰ªéÈÄöÁü•Êàñ URL Scheme ÂêØÂä®Êó∂ÔºåUI Êú™Â∞±Áª™ÔºåË∑ØÁî±Ë¢´Âª∂Ëøü
        if Router.shared.hasPendingRoute {
            print("üöÄ HomeViewController Â∑≤Â∞±Áª™ÔºåÊâßË°åÂæÖÂ§ÑÁêÜË∑ØÁî±")
            Router.shared.executePendingRoute()
        }
    }
    
    // MARK: - UI ËÆæÁΩÆ
    private func setupUI() {
        title = "iOS Êû∂ÊûÑËÆæËÆ°"
        view.backgroundColor = .systemBackground
        
        // ËÆæÁΩÆ TableView
        view.addSubview(tableView)
        NSLayoutConstraint.activate([
            tableView.topAnchor.constraint(equalTo: view.topAnchor),
            tableView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            tableView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            tableView.bottomAnchor.constraint(equalTo: view.bottomAnchor)
        ])
        
        // ËÆæÁΩÆÂ§¥ÈÉ®ËßÜÂõæ
        headerView.frame = CGRect(x: 0, y: 0, width: view.bounds.width, height: 150)
        tableView.tableHeaderView = headerView
    }
}

// MARK: - UITableViewDataSource
extension HomeViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return architectureItems.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "ArchitectureItemCell", for: indexPath) as! ArchitectureItemCell
        let item = architectureItems[indexPath.row]
        cell.configure(with: item)
        return cell
    }
}

// MARK: - UITableViewDelegate
extension HomeViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
        
        let item = architectureItems[indexPath.row]
        let viewController = item.viewController()
        navigationController?.pushViewController(viewController, animated: true)
    }
}

// MARK: - Ëá™ÂÆö‰πâ Cell
class ArchitectureItemCell: UITableViewCell {
    
    // MARK: - UI ÁªÑ‰ª∂
    private let iconBackgroundView: UIView = {
        let view = UIView()
        view.layer.cornerRadius = 12
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    
    private let iconImageView: UIImageView = {
        let imageView = UIImageView()
        imageView.contentMode = .scaleAspectFit
        imageView.tintColor = .white
        imageView.translatesAutoresizingMaskIntoConstraints = false
        return imageView
    }()
    
    private let titleLabel: UILabel = {
        let label = UILabel()
        label.font = .systemFont(ofSize: 17, weight: .semibold)
        label.textColor = .label
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    private let subtitleLabel: UILabel = {
        let label = UILabel()
        label.font = .systemFont(ofSize: 13, weight: .regular)
        label.textColor = .secondaryLabel
        label.numberOfLines = 2
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    private let arrowImageView: UIImageView = {
        let imageView = UIImageView()
        imageView.image = UIImage(systemName: "chevron.right")
        imageView.contentMode = .scaleAspectFit
        imageView.tintColor = .tertiaryLabel
        imageView.translatesAutoresizingMaskIntoConstraints = false
        return imageView
    }()
    
    // MARK: - ÂàùÂßãÂåñ
    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {
        super.init(style: style, reuseIdentifier: reuseIdentifier)
        setupUI()
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    // MARK: - UI ËÆæÁΩÆ
    private func setupUI() {
        contentView.addSubview(iconBackgroundView)
        iconBackgroundView.addSubview(iconImageView)
        contentView.addSubview(titleLabel)
        contentView.addSubview(subtitleLabel)
        contentView.addSubview(arrowImageView)
        
        NSLayoutConstraint.activate([
            // ÂõæÊ†áËÉåÊôØ
            iconBackgroundView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 16),
            iconBackgroundView.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),
            iconBackgroundView.widthAnchor.constraint(equalToConstant: 56),
            iconBackgroundView.heightAnchor.constraint(equalToConstant: 56),
            
            // ÂõæÊ†á
            iconImageView.centerXAnchor.constraint(equalTo: iconBackgroundView.centerXAnchor),
            iconImageView.centerYAnchor.constraint(equalTo: iconBackgroundView.centerYAnchor),
            iconImageView.widthAnchor.constraint(equalToConstant: 28),
            iconImageView.heightAnchor.constraint(equalToConstant: 28),
            
            // Ê†áÈ¢ò
            titleLabel.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 16),
            titleLabel.leadingAnchor.constraint(equalTo: iconBackgroundView.trailingAnchor, constant: 16),
            titleLabel.trailingAnchor.constraint(equalTo: arrowImageView.leadingAnchor, constant: -8),
            
            // ÂâØÊ†áÈ¢ò
            subtitleLabel.topAnchor.constraint(equalTo: titleLabel.bottomAnchor, constant: 4),
            subtitleLabel.leadingAnchor.constraint(equalTo: titleLabel.leadingAnchor),
            subtitleLabel.trailingAnchor.constraint(equalTo: titleLabel.trailingAnchor),
            
            // ÁÆ≠Â§¥
            arrowImageView.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),
            arrowImageView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -16),
            arrowImageView.widthAnchor.constraint(equalToConstant: 14),
            arrowImageView.heightAnchor.constraint(equalToConstant: 14)
        ])
    }
    
    // MARK: - ÈÖçÁΩÆ
    func configure(with item: ArchitectureItem) {
        titleLabel.text = item.title
        subtitleLabel.text = item.subtitle
        iconImageView.image = UIImage(systemName: item.icon)
        iconBackgroundView.backgroundColor = item.color
    }
}

// MARK: - Â§¥ÈÉ®ËßÜÂõæ
class HomeHeaderView: UIView {
    
    private let titleLabel: UILabel = {
        let label = UILabel()
        label.text = "iOS Êû∂ÊûÑËÆæËÆ°"
        label.font = .systemFont(ofSize: 28, weight: .bold)
        label.textColor = .label
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    private let subtitleLabel: UILabel = {
        let label = UILabel()
        label.text = "7‰∏™ÁÉ≠Èó®Ê°ÜÊû∂ ¬∑ Èù¢ËØïÂøÖÂ§á ¬∑ ÂÆûÊàòÊºîÁªÉ"
        label.font = .systemFont(ofSize: 15, weight: .regular)
        label.textColor = .secondaryLabel
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    private let statsLabel: UILabel = {
        let label = UILabel()
        label.text = "üì¶ ‰∏ãËΩΩ ¬∑ üñºÔ∏è ÂõæÁâá ¬∑ üó∫Ô∏è URLË∑ØÁî± ¬∑ üìù Êó•Âøó ¬∑ üì¢ EventBus ¬∑ üèóÔ∏è MVVM ¬∑ üîó ÂçèËÆÆË∑ØÁî±"
        label.font = .systemFont(ofSize: 13, weight: .regular)
        label.textColor = .tertiaryLabel
        label.numberOfLines = 0
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    override init(frame: CGRect) {
        super.init(frame: frame)
        setupUI()
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    private func setupUI() {
        addSubview(titleLabel)
        addSubview(subtitleLabel)
        addSubview(statsLabel)
        
        NSLayoutConstraint.activate([
            titleLabel.topAnchor.constraint(equalTo: topAnchor, constant: 24),
            titleLabel.leadingAnchor.constraint(equalTo: leadingAnchor, constant: 20),
            titleLabel.trailingAnchor.constraint(equalTo: trailingAnchor, constant: -20),
            
            subtitleLabel.topAnchor.constraint(equalTo: titleLabel.bottomAnchor, constant: 8),
            subtitleLabel.leadingAnchor.constraint(equalTo: leadingAnchor, constant: 20),
            subtitleLabel.trailingAnchor.constraint(equalTo: trailingAnchor, constant: -20),
            
            statsLabel.topAnchor.constraint(equalTo: subtitleLabel.bottomAnchor, constant: 16),
            statsLabel.leadingAnchor.constraint(equalTo: leadingAnchor, constant: 20),
            statsLabel.trailingAnchor.constraint(equalTo: trailingAnchor, constant: -20)
        ])
    }
}

// MARK: - Âç†‰Ωç ViewControllerÔºàÂæÖÂÆûÁé∞ÁöÑÈ°µÈù¢Ôºâ

class ImageLoaderDemoViewController: UIViewController {
    override func viewDidLoad() {
        super.viewDidLoad()
        title = "ÂõæÁâáÂä†ËΩΩÊ°ÜÊû∂"
        view.backgroundColor = .systemBackground
        
        let label = UILabel()
        label.text = "ÂõæÁâáÂä†ËΩΩÊ°ÜÊû∂ÊºîÁ§∫\n\nÂäüËÉΩÔºö‰∏âÁ∫ßÁºìÂ≠ò„ÄÅÈò≤ÈáçÂ§ç‰∏ãËΩΩ\n\nÊï¨ËØ∑ÊúüÂæÖ... üé®"
        label.numberOfLines = 0
        label.textAlignment = .center
        label.font = .systemFont(ofSize: 18, weight: .medium)
        label.textColor = .secondaryLabel
        label.translatesAutoresizingMaskIntoConstraints = false
        
        view.addSubview(label)
        NSLayoutConstraint.activate([
            label.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            label.centerYAnchor.constraint(equalTo: view.centerYAnchor),
            label.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 40),
            label.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -40)
        ])
    }
}

// RouterDemoViewController Â∑≤Âú® RouterDemoViewController.swift ‰∏≠ÂÆûÁé∞
// LoggerDemoViewController Â∑≤Âú® LoggerDemoViewController.swift ‰∏≠ÂÆûÁé∞
